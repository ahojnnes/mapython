# coding: utf-8
import os
import sys
import StringIO
from bottle import route, response, request, run, TEMPLATE_PATH, static_file, \
    PasteServer, template

DIRNAME = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.dirname(os.path.dirname(DIRNAME)))

os.environ['MAPYTHON_DB_URL'] = 'postgresql://geo:asdasdasd@localhost/osm'
from mapython.render import Renderer
from mapython.draw import Map
from mapython.style import StyleSheet


TEMPLATE_PATH.insert(0, os.path.join(DIRNAME, 'views'))
STYLESHEET = StyleSheet(os.path.join(DIRNAME, 'simplified-style.yml'))

@route('/')
def index():
    return template('index')

@route('/tiles/')
def tiles():
    return template('tiles')

@route('/dynamic/')
def dynamic():
    return template('dynamic')
    
@route('/render/')
def render():
    left = request.GET['left']
    top = request.GET['top']
    right = request.GET['right']
    bottom = request.GET['bottom']
    scale = request.GET['scale']
    width = request.GET['width']
    height = request.GET['height']
    fobj = StringIO.StringIO()
    bbox = (
        float(left), float(bottom), float(right), float(top)
    )
    map_obj = Map(fobj, bbox, max(int(width), int(height)))
    Renderer(map_obj, quiet=True, stylesheet=STYLESHEET).run()
    map_obj.write()
    response.content_type = 'image/png'
    return fobj.getvalue()
    
@route('/tile-data/:filename#.*#')
def media(filename):
    return static_file(filename, root=TILE_DATA)
    
    
if __name__ == '__main__':
    # tiles generated by scripts/generate_tiles.py
    TILE_DATA = 'tiles'
    # using paste server for parallel/threaded rendering
    run(server=PasteServer, host='localhost', port=8080)
    